#!/usr/bin/with-contenv bash
. /usr/local/bin/variables

if [[ -z $RCLONE_REMOTE_PATH ]]; then
    echo "*** RCLONE_REMOTE_PATH not set. Exiting..."
    exit 1
fi

if [[ ! "${RCLONE_REMOTE_PATH}" == :* ]]; then
    # if not using connection strings for remote path
    until [ -f "${RCLONE_CONFIG}" ]; do
        echo "Waiting for '${RCLONE_CONFIG}'. Retrying in 30s ..."
        echo "RUN: docker exec -it <DOCKER_CONTAINER> rclone_setup"
        sleep 30
    done
fi

echo "*** checking rclone remote path: ${RCLONE_REMOTE_PATH}"
if [[ ! "${RCLONE_REMOTE_PATH}" == *:* ]]; then
    echo "ERROR: Missing colon (:) in RCLONE_REMOTE_PATH (${RCLONE_REMOTE_PATH})"
    exit 1
fi
if [[ ! "${RCLONE_REMOTE_PATH}" == :* ]]; then
    rclone_remote="$(echo "$RCLONE_REMOTE_PATH" | cut -d: -f1):"
    if ! rclone listremotes | grep -q "${rclone_remote}"; then
        echo "ERROR: Invalid rclone remote name (${rclone_remote})"
        echo "ERROR: Available rclone remotes ($(rclone listremotes | xargs))"
        exit 1
    fi
fi

echo "*** checking rclone mountpoint: ${rclone_mountpoint}"
while findmnt "${rclone_mountpoint}" | grep -q fuse.rclone; do
    echo "ERROR: rclone mountpoint (${rclone_mountpoint}) already mounted"
    fusermount -uz "${rclone_mountpoint}"
    echo "Retrying in 30s ..."
    sleep 30s
done

# checking redefined args
redefined=""
for opt in $rclone_mount_basic_opts; do
    opt="${opt%=*}"
    case " $RCLONE_MOUNT_USER_OPTS " in *" ${opt}="* | *" ${opt} "* ) redefined="$redefined ${opt}";; esac
done
if [ -n "${redefined}" ]; then
    echo "*** ERROR: Some of the arguments you have specified are already built-in. Please remove them from the RCLONE_MOUNT_USER_OPTS environment variable:${redefined}"
    exit 1
fi

# checking duplicates in RCLONE_REFRESH_CRON@
crons=()
for cron in "${!RCLONE_REFRESH_CRON@}"; do
    crons+=("${!cron}")
done
ndup=$(printf '%s\n' "${crons[@]}"|awk '!($0 in seen){seen[$0];c++} END {print c}')
if [ ${#crons[@]} -ne 0 ] && [ ${#crons[@]} -ne "$ndup" ]; then
    echo "*** ERROR: found duplicates in your RCLONE_REFRESH_CRON*"
    while IFS= read -r dup; do
        printf "  - \"%s\" -> " "$dup"
        for cron in "${!RCLONE_REFRESH_CRON@}"; do
            [ "$dup" = "${!cron}" ] && printf '%s ' "${cron}"
        done
        printf "\n"
    done <<< "$(printf '%s\n' "${crons[@]}"|awk '!($0 in seen){seen[$0];next} 1')"
    exit 1
fi

# ensure RCLONE_REFRESH_ON_MOUNT_REPEAT is unsigned integer
is_uint() { case $1 in ''|*[!0-9]*) return 1;;esac; }
if ! is_uint "$RCLONE_REFRESH_ON_MOUNT_REPEAT"; then
    echo "*** ERROR: variable should be unsigned integer: RCLONE_REFRESH_ON_MOUNT_REPEAT=$RCLONE_REFRESH_ON_MOUNT_REPEAT"
    exit 1
fi

# permissions
chown -R abc:abc \
    /config /log /cloud /data
chown abc:abc /cache /local

echo "*** rclone v$(rclone version | head -n1 | cut -f2 -dv) ready!"
