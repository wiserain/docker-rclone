#!/bin/bash

logf() {
    echo "$(date "$(printenv DATE_FORMAT)") MOVELO: $1"
}

# If script is already running; abort.
if pidof -o %PPID -x "$(basename "$0")">/dev/null; then
    logf "Already in progress. Aborting!"
    exit 3
fi

# Check if any files exist, if not exit
file_ct=$(find /local -type f | wc -l)
if [ "$file_ct" = 0 ];then
    # logf "Nothing to move. Exiting."
    exit 3
fi

humanReadableSize () {
    numfmt --to=iec "$1" --suffix=B --format="%.2f"
}

pSize=0
pCount=0
rclone_remote_path=$(printenv RCLONE_REMOTE_PATH | tr -d '"' | tr -d "'")
prune_paths=$(find /local -name .nomove -printf "-path %h -o ")

# logf "###### Starting rclone move ######"

# move old files first
if [[ ${MOVE_LOCAL_AFTER_DAYS} =~ ^[0-9]+$ ]]; then
    while read -r n; do
        # sometimes empty stdin can be redirected by the result of find
        if [ ! -f "$n" ]; then continue; fi

        # Find the pathname relative to the root of your remote and store filename
        filename="$(echo "$n" | sed -e s@/local@@)"
        destpath="$(dirname "$n" | sed -e s@/local@@)"
        basefile="$(basename "$n")"

        # Skip hidden or partial files.
        case "$n" in
            (*.partial~) continue ;;
            (*_HIDDEN~) continue ;;
            (*.QTFS) continue ;;
            (*.unionfs-fuse*) continue ;;
            (*.DS_STORE) continue ;;
            (*.part) continue ;;
            (*.nocopy) continue ;;
            (*.nomove) continue ;;
        esac

        # If file is opened by another process, wait until it isn't.
        while [ "$(lsof "$n" >/dev/null 2>&1)" ] || \
            [ "$(lsof "/local/${n}" >/dev/null 2>&1)" ] || \
            [ "$(lsof "/data/${n}" >/dev/null 2>&1)" ]; do
            logf "File -> ${n} in use. Retrying in 10 seconds ..."
            sleep 10
        done

        fileSize=$(stat "$n" -c %s)

        # Move file to remote destination[s], retaining path
        if rclone move "$@" "$n" "${rclone_remote_path}${destpath}" >/dev/null 2>&1; then
            pSize=$((pSize + fileSize))
            pCount=$((pCount + 1))
            logf "+${MOVE_LOCAL_AFTER_DAYS}D $basefile ($(humanReadableSize "$fileSize"))"
        fi
    done <<<"$(find /local -type d \( $prune_paths -false \) -prune -o -type f -mtime +$MOVE_LOCAL_AFTER_DAYS -print)"
fi

# then move exceed files
if [[ ${MOVE_LOCAL_EXCEEDS_GB} =~ ^[0-9]+$ ]] && [[ ${MOVE_LOCAL_FREEUP_GB} =~ ^[0-9]+$ ]]; then
    maxSize=$((MOVE_LOCAL_EXCEEDS_GB * 1000 * 1000 * 1000))
    currentSize="$(du -sb /local | awk '{print $1}')"
    if [ "$maxSize" -gt "$currentSize" ]; then
        # logf "Current size of $(($currentSize / 1000 / 1000 / 1000)) GB has not exceeded $MOVE_LOCAL_EXCEEDS_GB GB"
        :
    else
        freeupSize=$((MOVE_LOCAL_FREEUP_GB * 1000 * 1000 * 1000))
        freeupMin=$((currentSize - maxSize))
        freeupSize=$((freeupSize>freeupMin ? freeupSize : freeupMin))
        freeupTotal=$((freeupSize + pSize))

        while read -r n; do
            if [ "$pSize" -gt "$freeupTotal" ]; then
                break
            fi

            # sometimes empty stdin can be redirected by the result of find
            if [ ! -f "$n" ]; then continue; fi

            # Find the pathname relative to the rsoot of your remote and store filename
            filename="$(echo "$n" | sed -e s@/local@@)"
            destpath="$(dirname "$n" | sed -e s@/local@@)"
            basefile="$(basename "$n")"

            # Skip hidden or partial files.
            case "$n" in
                (*.partial~) continue ;;
                (*_HIDDEN~) continue ;;
                (*.QTFS) continue ;;
                (*.fuse*) continue ;;
                (.DS_STORE) continue ;;
                (*.part) continue ;;
                (*.nocopy) continue ;;
                (*.nomove) continue ;;
            esac

            # If file is opened by another process, wait until it isn't.
            while [ "$(lsof "$n" >/dev/null 2>&1)" ] || \
                [ "$(lsof "/local/${n}" >/dev/null 2>&1)" ] || \
                [ "$(lsof "/data/${n}" >/dev/null 2>&1)" ]; do
                logf "File -> ${n} in use. Retrying in 10 seconds ..."
                sleep 10
            done

            fileSize=$(stat "$n" -c %s)

            # Move file to remote destination[s], retaining path
            if rclone move --config=/config/rclone.conf "$@" "$n" "${rclone_remote_path}${destpath}" >/dev/null 2>&1; then
                pSize=$((pSize + fileSize))
                pCount=$((pCount + 1))
                logf "+${MOVE_LOCAL_EXCEEDS_GB}GB $basefile ($(humanReadableSize "$fileSize"))"
            fi
        done <<<"$(find /local -type d \( $prune_paths -false \) -prune -o -type f -print0 | xargs -0 --no-run-if-empty stat --format '%Y :%y %n' | sort -n | cut -d: -f2- | awk '{$1=$2=$3=""; print $0}')"
    fi
fi

# finally move all
if [ "${MOVE_LOCAL_ALL}" == "true" ]; then
    # Generate filelist and iterate through it...
    while read -r n; do
        # sometimes empty stdin can be redirected by the result of find
        if [ ! -f "$n" ]; then continue; fi

        # Find the pathname relative to the root of your remote and store filename
        filename="$(echo "$n" | sed -e s@/local@@)"
        destpath="$(dirname "$n" | sed -e s@/local@@)"
        basefile="$(basename "$n")"

        # Skip hidden or partial files.
        case "$n" in
            (*.partial~) continue ;;
            (*_HIDDEN~) continue ;;
            (*.QTFS) continue ;;
            (*.unionfs-fuse*) continue ;;
            (*.DS_STORE) continue ;;
            (*.part) continue ;;
            (*.nocopy) continue ;;
            (*.nomove) continue ;;
        esac

        # If file is opened by another process, wait until it isn't.
        while [ "$(lsof "$n" >/dev/null 2>&1)" ] || \
            [ "$(lsof "/local/${n}" >/dev/null 2>&1)" ] || \
            [ "$(lsof "/data/${n}" >/dev/null 2>&1)" ]; do
            logf "File -> ${n} in use. Retrying in 10 seconds ..."
            sleep 10
        done

        fileSize=$(stat "$n" -c %s)

        # Move file to remote destination[s], retaining path
        if rclone move --config=/config/rclone.conf "$@" "$n" "${rclone_remote_path}${destpath}" >/dev/null 2>&1; then
            pSize=$((pSize + fileSize))
            pCount=$((pCount + 1))
            logf "$basefile ($(humanReadableSize "$fileSize"))"
        fi
    done <<<"$(find /local -type d \( $prune_paths -false \) -prune -o -type f -print)"
fi

# cleanup
if [ "$(printenv KEEP_EMPTY_DIRS)" -ne "1" ]; then
    find /local -mindepth 1 -type d -empty -delete
fi

# final report
if [[ "${pCount}" -gt "0" ]]; then
    logf "###### Total $(humanReadableSize $pSize) of $pCount file(s) moved ######"
fi
# logf "###### rclone move finished successfully ######"

exit 0
